program -> dec_list
dec_list -> dec dec_list
dec_list -> <eps>
dec -> type {id.type = type.type} <id> {init_dec.type = type.type} init_dec {dec.type = type.type}
init_dec -> {var_dec_global.type = init_dec.type} {symbol_table[id] = type} var_dec_global
init_dec -> {func_dec.type = init_dec.type} {symbol_table[id] = type} {current_function = id} func_dec

var_dec_global -> sz initial {if (var_id.type != initial.type and initial.type != void) error, more.type = var_dec_global.type} more
more -> <,> {var_dec_list.type = more.type} var_dec_list <;>
more -> <;>

var_dec -> type {var_dec_list.type = type.type} var_dec_list <;> {var_dec.type = type.type}
var_dec -> <;>
var_dec_list -> {var_dec_init.type = var_dec_list.type} var_dec_init {var_dec_list2.type = var_dec_list.type} var_dec_list2
var_dec_list -> <eps>
var_dec_list2 -> <,> {var_dec_init.type = var_dec_list2.type} var_dec_init {var_dec_list2@.type = var_dec_list2} var_dec_list2@
var_dec_list2 -> <eps>
var_dec_init -> {var_id.type = var_dec_init.type} var_id initial {if (var_id.type != initial.type and initial.type != void) error}
var_id -> {id.type = var_id.type} {symbol_table[id] = type} <id> sz
sz -> <[> optexp <]> {if (optexp.type != void and optexp.type != int} error;}
sz -> <eps>
optexp -> exp {optexp.type = exp.type} {if (exp.val.toint < 0) error;}
optexp -> <eps> {optexp.type = void}

initial -> <=> eexp {initial.type = eexp.type}
initial -> <eps> {initial.type = void}
eexp -> exp1 {eexp.type = exp1.type}
eexp -> <{> exp_list <}> {eexp.type = exp_list.type}
exp_list -> exp1 exp_list2 {if (exp1.type == exp_list2.type || exp_list2.type == void) exp_list.type = exp1.type; else error, exp_list.type = void;}
exp_list -> <eps> {exp_list.type = void}
exp_list2 -> <,> exp1 exp_list2@ {if (exp1.type == exp_list2@.type || exp_list2@.type == void) exp_list2.type = exp1.type; else error, exp_list2.type = void;}
exp_list2 -> <eps> {exp_list2.type = void}
type -> <int> {type.type = int}
type -> <bool> {type.type = bool}
type -> <char> {type.type = char}

func_dec -> <(> params <)> <{> stmt_list <}>
params -> param params2
params -> <eps>
params2 -> <,> param params2
params2 -> <eps>
param -> type {param_id.type = type.type} param_id {param.type = type.type} {symbol_table[current_func].add_to_parmeters({id, param.type})}
param_id -> {id.type = param_id.type} <id> bracket
bracket -> <[> <]>
bracket -> <eps>

stmt_list -> stmt stmt_list
stmt_list -> <eps>
stmt -> var_dec
stmt -> break_stmt
stmt -> continue_stmt
stmt -> return_stmt {if (return_stmt.type != symbol_table[current_func].type) error;}
stmt -> if_stmt
stmt -> for_stmt
stmt -> print_stmt
stmt -> expr_stmt
stmt -> <{> stmt_list <}>
stmt -> <;>

if_stmt -> <if> <(> exp <)> stmt else_stmt {if (exp.type != void && exp.type != bool) error;}
else_stmt -> <else> stmt
else_stmt -> <eps>

break_stmt -> <break> <;>
continue_stmt -> <continue> <;>
return_stmt -> <return> exp <;> {return_stmt.type = exp.type}

for_stmt -> <for> <(> var_dec exp <;> exp <)> {increase def_area of every id} stmt
print_stmt -> <print> <(> context <)> <;>
context -> <string> context2
context2 -> <,> exp context2
context2 -> <eps>
expr_stmt -> exp <;>

exp -> exp1 t1 {if (t1.type == void) exp.type = exp1.type; else exp.type = t1.type;} {exp.val = exp1.val}
t1 -> <,> exp1 t1@ {if (t1@.type == void) t1.type = exp1.type; else t1.type = t1@.type;}
t1 -> <eps> {t1.type = void}

exp1 -> exp2 t2 {if (t2.type == void or t2.type == exp2.type) exp1.type = exp2.type; else error, exp1.type = exp2.type;} {exp1.val = exp2.val}
t2 -> <=> exp2 t2@ {if (t2@.type == void or t2@.type == exp2.type) t2.type = exp2.type; else error, t2.type = exp2.type;}
t2 -> <eps> {t2.type = void}

exp2 -> exp3 t3 {if (t3.type == void or (t3.type == bool and exp3.type == bool)) exp2.type = exp3.type; else error, exp2.type = bool;} {exp2.val = exp3.val}
t3 -> <||> exp3 t3@ {if (t3@.type == void or (t3@.type == bool and exp3.type == bool)) t3.type = exp3.type; else eroor, t3.type = bool;}
t3 -> <eps> {t3.type = void}

exp3 -> exp4 t4 {if (t4.type == void or (t4.type == bool and exp4.type == bool)) exp3.type = exp4.type; else error, exp3.type = bool;} {exp3.val = exp4.val}
t4 -> <&&> exp4 t4@ {if (t4@.type == void or (t4@.type == bool and exp4.type == bool)) t4.type = exp4.type; else error, t4.type = bool;}
t4 -> <eps> {t4.type = void}

exp4 -> exp5 t5 {if (t5.type == void or t5.type == exp5.type) exp4.type = exp5.type; else error, exp4.type = bool;} {exp4.val = exp5.val}
t5 -> <==> exp5 t5@ {if (t5@.type == void or t5@.type == exp5.type) t5.type = exp5.type; else error, t5.type = bool;} 
t5 -> <!=> exp5 t5@ {if (t5@.type == void or t5@.type == exp5.type) t5.type = exp5.type; else error, t5.type = bool;}
t5 -> <eps> {t5.type = void}

exp5 -> exp6 t6 {if (t6.type == void or t6.type == exp6.type) exp5.type = exp6.type; else error, exp5.type = bool;} {exp5.val = exp6.val}
t6 -> <<> exp6 t6@ {if (t6@.type == void or t6@.type == exp6.type) t6.type = exp6.type; else error, t6.type = bool;}
t6 -> <>> exp6 t6@ {if (t6@.type == void or t6@.type == exp6.type) t6.type = exp6.type; else error, t6.type = bool;}
t6 -> <<=> exp6 t6@ {if (t6@.type == void or t6@.type == exp6.type) t6.type = exp6.type; else error, t6.type = bool;}
t6 -> <>=> exp6 t6@ {if (t6@.type == void or t6@.type == exp6.type) t6.type = exp6.type; else error, t6.type = bool;}
t6 -> <eps> {t6.type = void}

exp6 -> exp7 t7 {if (t7.type == void or t7.type == exp7.type) exp6.type = exp7.type; else error, exp6.type = int;} {exp6.val = eval(exp7.val + t7.val)}
t7 -> <+> exp7 t7@ {if (t7@.type == void or t7@.type == exp7.type) t7.type = exp7.type; else error, t7.type = int;} {t7.val = "+" + exp7.val + t7@.val}
t7 -> <-> exp7 t7@ {if (t7@.type == void or t7@.type == exp7.type) t7.type = exp7.type; else error, t7.type = int;} {t7.val = "-" + exp7.val + t7@.val}
t7 -> <eps> {t7.type = void} 

exp7 -> exp8 t8 {if (t8.type == void or t8.type == exp8.type) exp7.type = exp8.type; else error, exp7.type = int;} {exp7.val = eval(exp8.val + t8.val)}
t8 -> <*> exp8 t8@ {if (t8@.type == void or t8@.type == exp8.type) t8.type = exp8.type; else error, t8.type = int;} {t8.val = "*" + exp8.val + t8@.val}
t8 -> </> exp8 t8@ {if (t8@.type == void or t8@.type == exp8.type) t8.type = exp8.type; else error, t8.type = int;} {t8.val =  "/" + exp8.val + t8@.val}
t8 -> <%> exp8 t8@ {if (t8@.type == void or t8@.type == exp8.type) t8.type = exp8.type; else error, t8.type = int;} {t8.val = "%" + expt8.val + t8@.val}
t8 -> <eps> {t8.type = void}

exp8 -> <+> exp9 {if (exp9.type == int) exp8.type = int; else error, exp8.type = int;} {exp8.val = exp9.val}
exp8 -> <-> exp9 {if (exp9.type == int) exp8.type = int; else error, exp8.type = int;} {exp8.val = "-" + exp9.val}
exp8 -> <!> exp9 {if (exp9.type == bool) exp8.type = bool; else error, exp8.type = bool;}
exp8 -> exp9 {exp8.type = exp9.type, exp8.val = exp9.val}

exp9 -> <(> exp <)> {exp9.type = exp.type, exp9.val = exp.val}
exp9 -> <id> func_call_or_id {id.type = func_call_or_id.type, exp9.type = id.type, exp9.val = 0}
exp9 -> constant {exp9.type = constant.type, exp9.val = constant.val}

func_call_or_id -> {check symbol_table[id], func_call_or_id.type = symbol_table[id].type} <(> params_call <)> {check params_call.params_type}
func_call_or_id -> {check symbol_table[id], func_call_or_id.type = symbol_table[id].type} ebracket
params_call -> exp1 params_call2 {params_call.params_type.push_back(exp1.type, params_call2.params_type)}
params_call -> <eps>
params_call2 -> <,> exp1 params_call2@ {params_call2.params_type.push_back(exp1, params_call2@.params_type)}
params_call2 -> <eps>
ebracket -> <[> exp <]> {if (exp.type != int) error;} {if (exp.val.toint < 0) error;}
ebracket -> <eps> 

constant -> <decimal> {constant.type = int, constant.val = decimal.content}
constant -> <hexadecimal> {constant.type = int, constant.val = decimal.content}
constant -> <string> {constant.type = char}
constant -> <character> {constant.type = char}
constant -> <false> {constant.type = bool}
constant -> <true> {constant.type = bool}

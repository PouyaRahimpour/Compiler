< type: T_Int, line: 1, content: int >
< type: T_Id, line: 1, content: test_function >
< type: T_LP, line: 1, content: ( >
< type: T_Int, line: 1, content: int >
< type: T_Id, line: 1, content: a >
< type: T_Comma, line: 1, content: , >
< type: T_Int, line: 1, content: int >
< type: T_Id, line: 1, content: b >
< type: T_Comma, line: 1, content: , >
< type: T_Bool, line: 1, content: bool >
< type: T_Id, line: 1, content: c >
< type: T_RP, line: 1, content: ) >
< type: T_LC, line: 1, content: { >
< type: T_If, line: 2, content: if >
< type: T_LP, line: 2, content: ( >
< type: T_Id, line: 2, content: c >
< type: T_ROp_E, line: 2, content: == >
< type: T_True, line: 2, content: true >
< type: T_RP, line: 2, content: ) >
< type: T_LC, line: 2, content: { >
< type: T_Return, line: 3, content: return >
< type: T_Id, line: 3, content: a >
< type: T_AOp_PL, line: 3, content: + >
< type: T_Id, line: 3, content: b >
< type: T_Semicolon, line: 3, content: ; >
< type: T_RC, line: 4, content: } >
< type: T_Else, line: 4, content: else >
< type: T_LC, line: 4, content: { >
< type: T_Return, line: 5, content: return >
< type: T_Id, line: 5, content: a >
< type: T_AOp_MN, line: 5, content: - >
< type: T_Id, line: 5, content: b >
< type: T_Semicolon, line: 5, content: ; >
< type: T_RC, line: 6, content: } >
< type: T_RC, line: 7, content: } >
< type: T_Int, line: 9, content: int >
< type: T_Id, line: 9, content: main >
< type: T_LP, line: 9, content: ( >
< type: T_RP, line: 9, content: ) >
< type: T_LC, line: 9, content: { >
< type: T_Bool, line: 10, content: bool >
< type: T_Id, line: 10, content: add >
< type: T_Assign, line: 10, content: = >
< type: T_True, line: 10, content: true >
< type: T_Semicolon, line: 10, content: ; >
< type: T_Char, line: 11, content: char >
< type: T_Id, line: 11, content: _assign1 >
< type: T_Assign, line: 11, content: = >
< type: T_Character, line: 11, content: '=' >
< type: T_Semicolon, line: 11, content: ; >
< type: T_Char, line: 12, content: char >
< type: T_Id, line: 12, content: String_1 >
< type: T_LB, line: 12, content: [ >
< type: T_RB, line: 12, content: ] >
< type: T_Assign, line: 12, content: = >
< type: T_String, line: 12, content: " + " >
< type: T_Semicolon, line: 12, content: ; >
< type: T_Char, line: 13, content: char >
< type: T_Id, line: 13, content: String_2 >
< type: T_LB, line: 13, content: [ >
< type: T_RB, line: 13, content: ] >
< type: T_Assign, line: 13, content: = >
< type: T_String, line: 13, content: " - " >
< type: T_Semicolon, line: 13, content: ; >
< type: T_Int, line: 14, content: int >
< type: T_Id, line: 14, content: num1 >
< type: T_Assign, line: 14, content: = >
< type: T_Decimal, line: 14, content: 10 >
< type: T_Semicolon, line: 14, content: ; >
< type: T_Int, line: 15, content: int >
< type: T_Id, line: 15, content: num2 >
< type: T_Assign, line: 15, content: = >
< type: T_Decimal, line: 15, content: 5 >
< type: T_Semicolon, line: 15, content: ; >
< type: T_Int, line: 16, content: int >
< type: T_Id, line: 16, content: _result >
< type: T_Assign, line: 16, content: = >
< type: T_Decimal, line: 16, content: 0 >
< type: T_Semicolon, line: 16, content: ; >
< type: T_For, line: 18, content: for >
< type: T_LP, line: 18, content: ( >
< type: T_Int, line: 18, content: int >
< type: T_Id, line: 18, content: i >
< type: T_Assign, line: 18, content: = >
< type: T_Decimal, line: 18, content: 0 >
< type: T_Semicolon, line: 18, content: ; >
< type: T_Id, line: 18, content: i >
< type: T_ROp_LE, line: 18, content: <= >
< type: T_Id, line: 18, content: num1 >
< type: T_AOp_DV, line: 18, content: / >
< type: T_Decimal, line: 18, content: 2 >
< type: T_Semicolon, line: 18, content: ; >
< type: T_Id, line: 18, content: i >
< type: T_Assign, line: 18, content: = >
< type: T_Id, line: 18, content: i >
< type: T_AOp_PL, line: 18, content: + >
< type: T_Decimal, line: 18, content: 1 >
< type: T_RP, line: 18, content: ) >
< type: T_LC, line: 18, content: { >
< type: T_For, line: 19, content: for >
< type: T_LP, line: 19, content: ( >
< type: T_Int, line: 19, content: int >
< type: T_Id, line: 19, content: j >
< type: T_Assign, line: 19, content: = >
< type: T_Decimal, line: 19, content: 0 >
< type: T_Semicolon, line: 19, content: ; >
< type: T_Id, line: 19, content: j >
< type: T_ROp_NE, line: 19, content: != >
< type: T_Id, line: 19, content: num2 >
< type: T_AOp_ML, line: 19, content: * >
< type: T_AOp_MN, line: 19, content: - >
< type: T_Decimal, line: 19, content: 1 >
< type: T_Semicolon, line: 19, content: ; >
< type: T_Id, line: 19, content: j >
< type: T_Assign, line: 19, content: = >
< type: T_Id, line: 19, content: j >
< type: T_AOp_MN, line: 19, content: - >
< type: T_Decimal, line: 19, content: 1 >
< type: T_RP, line: 19, content: ) >
< type: T_LC, line: 19, content: { >
< type: T_Id, line: 20, content: _result >
< type: T_Assign, line: 20, content: = >
< type: T_Id, line: 20, content: i >
< type: T_AOp_PL, line: 20, content: + >
< type: T_Id, line: 20, content: j >
< type: T_Semicolon, line: 20, content: ; >
< type: T_Print, line: 21, content: print >
< type: T_LP, line: 21, content: ( >
< type: T_String, line: 21, content: "Result: " >
< type: T_Comma, line: 21, content: , >
< type: T_Id, line: 21, content: _result >
< type: T_RP, line: 21, content: ) >
< type: T_Semicolon, line: 21, content: ; >
< type: T_RC, line: 22, content: } >
< type: T_RC, line: 23, content: } >
< type: T_Id, line: 25, content: add >
< type: T_Assign, line: 25, content: = >
< type: T_False, line: 25, content: false >
< type: T_Semicolon, line: 25, content: ; >
< type: T_For, line: 26, content: for >
< type: T_LP, line: 26, content: ( >
< type: T_Int, line: 26, content: int >
< type: T_Id, line: 26, content: i >
< type: T_Assign, line: 26, content: = >
< type: T_Decimal, line: 26, content: 0 >
< type: T_Semicolon, line: 26, content: ; >
< type: T_LOp_NOT, line: 26, content: ! >
< type: T_LP, line: 26, content: ( >
< type: T_Id, line: 26, content: i >
< type: T_ROp_E, line: 26, content: == >
< type: T_Decimal, line: 26, content: 5 >
< type: T_RP, line: 26, content: ) >
< type: T_Semicolon, line: 26, content: ; >
< type: T_Id, line: 26, content: i >
< type: T_Assign, line: 26, content: = >
< type: T_Id, line: 26, content: i >
< type: T_AOp_PL, line: 26, content: + >
< type: T_Decimal, line: 26, content: 1 >
< type: T_RP, line: 26, content: ) >
< type: T_LC, line: 26, content: { >
< type: T_For, line: 27, content: for >
< type: T_LP, line: 27, content: ( >
< type: T_Int, line: 27, content: int >
< type: T_Id, line: 27, content: j >
< type: T_Assign, line: 27, content: = >
< type: T_Decimal, line: 27, content: 0 >
< type: T_Semicolon, line: 27, content: ; >
< type: T_Id, line: 27, content: j >
< type: T_ROp_GE, line: 27, content: >= >
< type: T_AOp_MN, line: 27, content: - >
< type: T_Decimal, line: 27, content: 5 >
< type: T_Semicolon, line: 27, content: ; >
< type: T_Id, line: 27, content: j >
< type: T_Assign, line: 27, content: = >
< type: T_Id, line: 27, content: j >
< type: T_AOp_MN, line: 27, content: - >
< type: T_Decimal, line: 27, content: 1 >
< type: T_RP, line: 27, content: ) >
< type: T_LC, line: 27, content: { >
< type: T_If, line: 28, content: if >
< type: T_LP, line: 28, content: ( >
< type: T_LP, line: 28, content: ( >
< type: T_Id, line: 28, content: i >
< type: T_AOp_RM, line: 28, content: % >
< type: T_Decimal, line: 28, content: 4 >
< type: T_RP, line: 28, content: ) >
< type: T_ROp_E, line: 28, content: == >
< type: T_Decimal, line: 28, content: 0 >
< type: T_LOp_OR, line: 28, content: || >
< type: T_LP, line: 28, content: ( >
< type: T_Id, line: 28, content: i >
< type: T_AOp_RM, line: 28, content: % >
< type: T_Decimal, line: 28, content: 3 >
< type: T_RP, line: 28, content: ) >
< type: T_ROp_E, line: 28, content: == >
< type: T_Decimal, line: 28, content: 0 >
< type: T_RP, line: 28, content: ) >
< type: T_Continue, line: 29, content: continue >
< type: T_Semicolon, line: 29, content: ; >
< type: T_If, line: 30, content: if >
< type: T_LP, line: 30, content: ( >
< type: T_Id, line: 30, content: j >
< type: T_ROp_L, line: 30, content: < >
< type: T_AOp_MN, line: 30, content: - >
< type: T_Decimal, line: 30, content: 4 >
< type: T_LOp_AND, line: 30, content: && >
< type: T_Id, line: 30, content: i >
< type: T_ROp_G, line: 30, content: > >
< type: T_Decimal, line: 30, content: 3 >
< type: T_RP, line: 30, content: ) >
< type: T_Break, line: 31, content: break >
< type: T_Semicolon, line: 31, content: ; >
< type: T_Id, line: 32, content: _result >
< type: T_Assign, line: 32, content: = >
< type: T_Id, line: 32, content: i >
< type: T_AOp_MN, line: 32, content: - >
< type: T_Id, line: 32, content: j >
< type: T_Semicolon, line: 32, content: ; >
< type: T_Print, line: 33, content: print >
< type: T_LP, line: 33, content: ( >
< type: T_String, line: 33, content: "Result: " >
< type: T_Comma, line: 33, content: , >
< type: T_Id, line: 33, content: _result >
< type: T_RP, line: 33, content: ) >
< type: T_Semicolon, line: 33, content: ; >
< type: T_RC, line: 34, content: } >
< type: T_RC, line: 35, content: } >
< type: T_Print, line: 37, content: print >
< type: T_LP, line: 37, content: ( >
< type: T_String, line: 37, content: "Test string with escaped characters: " >
< type: T_RP, line: 37, content: ) >
< type: T_Semicolon, line: 37, content: ; >
< type: T_Print, line: 38, content: print >
< type: T_LP, line: 38, content: ( >
< type: T_String, line: 38, content: "\\n newline, \\t tab, \\r carriage return." >
< type: T_RP, line: 38, content: ) >
< type: T_Semicolon, line: 38, content: ; >
< type: T_Print, line: 40, content: print >
< type: T_LP, line: 40, content: ( >
< type: T_String, line: 40, content: "this is\" a whole string no other token like '=' or 'else' or even \\\\comment should be recognized\n" >
< type: T_RP, line: 40, content: ) >
< type: T_Semicolon, line: 40, content: ; >
< type: T_Char, line: 41, content: char >
< type: T_Id, line: 41, content: back >
< type: T_Assign, line: 41, content: = >
< type: T_Character, line: 41, content: '\\' >
< type: T_Semicolon, line: 41, content: ; >
< type: T_Char, line: 42, content: char >
< type: T_Id, line: 42, content: quote >
< type: T_Assign, line: 42, content: = >
< type: T_Character, line: 42, content: '\'' >
< type: T_Semicolon, line: 42, content: ; >
< type: T_Int, line: 43, content: int >
< type: T_Id, line: 43, content: _123 >
< type: T_Assign, line: 43, content: = >
< type: T_Hexadecimal, line: 43, content: 0XABCdef12 >
< type: T_Semicolon, line: 43, content: ; >
< type: T_Return, line: 45, content: return >
< type: T_Decimal, line: 45, content: 0 >
< type: T_Semicolon, line: 45, content: ; >
< type: T_RC, line: 46, content: } >
